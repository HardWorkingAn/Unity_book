★중요★ 프레임이 너무 빨라 작동이 빠르면 힘들 수 있으니
void Awake()
    {
        Application.targetFrameRate = 100; // 최대 100프레임 고정
    }
추가할것

챕터4 자동차 
오브젝트 이동

GameObject.Find("이름"); 를 통해서 변수에 오브젝트를 저장할 수 있다.
transform.Translate(x,y,z); 를 통해서 해당 오브젝트를 좌표기준에서 x y z 좌표 더하여 이동할 수 있다.

GetComponent<type>() 를 사용하기 위해서는 UnityEngine.UI 를 라이브러리를 상속받아야한다.

챕터5 화살 피하기 게임
프리팹 시간(초단위) 충돌감지 UI

getkeydown은 키를 눌렀을 때
getkey 는 키를 누르고있을 때
getkeyup은 키를 때었을 때 동작

Vector2 dir = p1 - p2; //p219 p1 과 p2의 중심점 끼리의 계산하기 위한 좌표값 생성
float d = dir.magnitude; //p1 과 p2의 중심점 끼리의 거리 2차좌표(피타고라스정의) 제곱을 하기 떄문에 - 좌표는 생각x

magnitude 함수는 벡터 타입으로 되어있는 값을 피타고라스 정의를 통하여 길이로 반환한다.

프리팹을 등륵한 오브젝트를 게임씬에서 에셋에 드래그&드롭 하면 프리팹 생성
프리팹을 만들기 전 먼저 오브젝트에 컨트롤러 스크립트를 넣고 프리팹을 만들어야한다.
또한 프리팹을 작동시키기 위해서는 빈 오브젝트 생성 후 하는 C# 스크립트 등륵하고 속성에 프리팹에 오브젝트를 설정

instantiate(인스턴트) 는 게임오브젝트를 생성 destroy 는 삭제
GameObject go = Instantiate(arrowPrefab) as GameObject;
//as GameObject란 Instantiate형은 기본적으로 Object형으로 반환되기 때문에 강제형변환(캐스트) 을 사용해 GameObject로 바꿀 수 있다.
Destroy(gameObject);

this.delta += Time.deltaTime; // Time.deltaTime 은 프레임과 pc성능과 무관하게 시간값을 쌓을 수 있다.

이미지 생성은 생성 -> UI -> 이미지 후 게임씬의 이미지 클릭 후 소스 이미지에서 이미지 선택

UI는 속성의 앵커 기준으로 0, 0 좌표를 가진다.
속성의 이미지 타입을 통하여 이미지를 잘라내는 방법을 선택 할 수 있다. 자세한내용은 p233~p234

★중요★
이미지를 변화하거나 텍스트를 출력하는등 UI오브젝트를 변화하기 위해서는 
GetComponent<type>() 를 사용하기 위해서는 UnityEngine.UI 를 라이브러리를 상속받아야한다.
But.
다른 오브젝트의 스크립트 메소드를 가져올 경우 GetComponent<class>().메소드명 을 통하여 사용이 가능하며 라이브러리 상속 받을 필요가없다.

p246
UI 버튼은 따로 스크립트를 만들 필요없이 캐릭터 컨트롤러 스크립트에 메소드를 생성해 속성의 OnClick() or 클릭시() 에서 + 를 눌러
게임씬의 캐릭터를 선택 후 캐릭터 컨트롤러 스크립트에 생성한 메소드를 등륵 해주면 된다.

챕터6 점프 올라가기 게임
물리엔진(물리 2d, Physics) 이용한 충돌(챕터5랑 충돌방식이 다름), 애니메이션, 씬전환

※ 물리엔진을 사용하는 것은 좌표 이동이 아닌 물리엔진을 이용한 힘으로 이동하기 떄문에 점점 이동이 점점 빨라지고 느려진다.

물리2d 설정하기 위해서는 오브젝트 클릭후 컴포넌트 추가에서 물리2D를 통해 추가 가능

라지드 바디 콜라이더 바디타입을 다이나믹 으로 설정하면 물리의 영향을 받지만 키네마틱으로 설정하면 물리의 영향을 받지 않는다.

267~268p
콜라이더(충돌범위설정?) 를 사용할 때 하나만 쓸 경우 충돌 판정이 정황하지 않을 수 있으므로 섞어 쓰는것이 유용할 수 있다.
또한, 사각형 콜라이더를 사용할 경우 지면이 각져있을 때 걸려서 이동하지 않을 수 있다. 원형(캡슐)형 으로 사용하면 지만이 각져있어도 매끄럽게 넘어간다.

Tip. Find 메소드의 종류 272p

Rigidbody2D 컴포넌트를 추가 했기 때문에 초기 설정할떄 GetComponent<Rigidbody2D>() 를 해줘야 한다.

AddForce 를 통해 오브젝트를 힘으로 이동 시킬 수 있으며 물리(질량 관성)의 영향을 받는다.
velocity는 AddForce를 통해 얻은 속력를 나타낸다.

애니메이션의 변화를 스프라이트 애니메이션이라고 하는데 C# 스크립트와 메카님을 사용할 수 있다.

충돌판정 메소드 301p
윈도우 메뉴 -> 애니메이션 을 통해서 창을 열어 싑게 사용할 수 있다. 애니메이션 생성도 컴포넌트이기 때문에 GetComponent를 사용해야한다.
단순 숨직임 반복은 프로퍼티 추가 -> sprite
애니메이션 처음 설정을 하면 처음꺼는 자동적으로 애니메이션 클립이 설정되지만 
이동과 점프등 여러가지면 애니메이션 클립을 전환 설정 및 파라미터 에서 + 눌러 트리거 추가 및 conditions 에서 파라미터 설정 해줘야한다.
또한 C# 스크립트로 점프 할때 파라미터로 설정한 제목으로 전환해줘야 한다.

충돌 모드는 Collision 과 Trigger 2종류가 있다.
Collision은 예로 캐릭터와 사과 오브젝트가 있는데 던져진 사과에 캐릭터가 맞으면 사과는 반동으로 튕겨나가고 캐릭터는 충돌 반응을 한다.
Trigger은 날라온 사과를 맞으면 충돌했다는 판정은 하지만 사과 오브젝트는 캐릭터를 통과한다.

콜라이더( Collider)속성에서 Trigger 를 설정하면 트리거모드 해제하면 Collision 모드이다.

씬을 변화 시켜주는 함수를 쓰기 위해선  using UnityEngine.SceneManagement; 를 import 해야한다.
또한 File -> Build Settings 에서 Build in Scene(빌드의 씬)에 씬을 드래그&드롭하여 등륵해야한다.

※ 캐릭터 에니메이션 컴포넌트 속성에 루트 모션 적용 하면 가속도가 붙지 않는다.